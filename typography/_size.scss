/**
 * Размеры заголовков.
 * @type Map
 */
$header-sizes: (
	'h1': 2.5,
	'h2': 2,
	'h3': 1.75,
	'h4': 1.5,
	'h5': 1.25,
	'h6': 1
) !default;

@each $header, $font-size in $header-sizes {
	#{$header} {
		font-size: $font-size + rem;
	}
}

/**
 * Отзывчивый размер шрифта, основанный на viewport-юнитах.
 * @param {Number} $responsive - viewport-юнит (процент от ширины / высоты).
 * @param {Number} $min - Минимальный размер шрифта в пикселях.
 * @param {Number} $max [false] - Максимальный размер шрифта в пикселях.
 * @param {Number} $fallback [false] - Промежуточный фиксированный размер в пикселях.
 * @example:
 *    // scss
 *    .text {
 *    	  @include responsive-font-size(3vw, 14px, 18px, 16px);
 *    }
 */
@mixin responsive-font-size($responsive, $min, $max: false, $fallback: false) {
	$responsive-unitless: $responsive / ($responsive - $responsive + 1);
	$dimension: if(unit($responsive) == 'vh', 'height', 'width');
	$min-breakpoint: $min / $responsive-unitless * 100;
	
	@media (max-#{$dimension}: #{$min-breakpoint}) {
		font-size: pxToRem(strip-units($min), $global-font-size);
	}
	
	@if $max {
		$max-breakpoint: $max / $responsive-unitless * 100;
		
		@media (min-#{$dimension}: #{$max-breakpoint}) {
			font-size: pxToRem(strip-units($max), $global-font-size);
		}
	}
	
	@if $fallback {
		font-size: pxToRem(strip-units($fallback), $global-font-size);
	}
	
	font-size: $responsive;
}

@mixin _line-height($font-size, $default-line-height: $global-line-height) {
	line-height: ceil($font-size / $default-line-height) * ($default-line-height / $font-size);
}
